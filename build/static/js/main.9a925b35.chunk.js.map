{"version":3,"sources":["Components/Todo/Todo.js","Components/TodoAdder/TodoAdder.js","App.js","serviceWorker.js","index.js"],"names":["todo","props","react_default","a","createElement","src","className","onClick","delete","checked","click","task","todoAdder","id","onChange","change","type","placeholder","value","taskName","onKeyPress","enterPressed","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","completeTask","event","index","cookies","todos","toConsumableArray","state","todods","tasksList","JSON","stringify","set","setState","addTodo","console","log","get","unshift","changeTaskName","target","key","splice","_this2","myTodos","map","t","Todo_Todo","deleteTask","TodoAdder","keyPressed","Component","withCookies","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a925b35.chunk.js","sourcesContent":["import React from 'react';\nimport './Todo.css';\n\nconst todo = (props)=>{\n    return (\n        <div>\n            <img src={'close.png'} className=\"icon-close\" onClick={props.delete}></img>\n            <li className={props.checked} onClick={props.click}>\n                <p>{props.task}</p>\n            </li>\n        </div>\n    )\n}\nexport default todo;","import React from 'react';\n\nconst todoAdder = (props)=>{\n\nreturn (\n<div id=\"myDIV\" className=\"header\">\n  <h2>My To Do List</h2>\n  {/* <TodoText change={props.change} taskName={props.taskName}/>  */}\n  <input onChange={props.change} type=\"text\" id=\"myInput\" placeholder=\"Todo Name\" value={props.taskName} onKeyPress={props.enterPressed}/>\n  <span onClick={props.click} className=\"addBtn\">Add</span>\n</div>\n);\n\n}\n\nexport default todoAdder;","import React, { Component } from 'react';\nimport './App.css';\nimport Todo from './Components/Todo/Todo';\nimport TodoAdder from './Components/TodoAdder/TodoAdder';\nimport { instanceOf } from 'prop-types';\nimport { withCookies, Cookies } from 'react-cookie';\n\nclass App extends Component {\n  static propTypes = {\n    cookies: instanceOf(Cookies).isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    const { cookies } = props;\n    this.state = {\n      todods:cookies.get('tasks')?cookies.get('tasks'):[],\n      taskName:\"\"\n      };\n  }\n  \n  completeTask=(event,index)=>{\n    const { cookies } = this.props;\n    const todos =[...this.state.todods];\n    todos[index].checked = \"checked\";\n    const tasksList=JSON.stringify(todos);\n    cookies.set('tasks',tasksList);\n    this.setState({\n      todods: todos\n    });\n  }\n\n  addTodo = (taskName)=>{\n    const { cookies } = this.props;\n    \n    const todos = [...this.state.todods];\n    if(this.state.taskName){\n      console.log(cookies.get('tasks'));\n      todos.unshift({task:taskName, checked:\"\"});\n      const tasksList=JSON.stringify(todos);\n        cookies.set('tasks',tasksList);\n      //console.log( stringArr);\n      this.setState({\n        todods: todos\n      });\n    this.setState({\n      taskName: \"\"\n    });\n    }\n  }\n\n  changeTaskName = (event) =>{\n    const task = event.target.value;\n    this.setState({\n      taskName: task\n    });\n  }\n\n  keyPressed(event){\n    if(event.key==='Enter'){\n      this.addTodo(this.state.taskName);\n    }\n  }\n\n  deleteTask(event, index){\n    const { cookies } = this.props;\n    const todos =[...this.state.todods];\n    todos.splice(index, 1);\n\n    const tasksList=JSON.stringify(todos);\n    cookies.set('tasks',tasksList);\n\n    this.setState({\n      todods: todos\n    });\n  }\n\n  render() {\n    let myTodos = this.state.todods.map((t,index)=>{\n        return (<Todo task={t.task} \n          click={(event)=>{this.completeTask(event,index)}}\n          checked={t.checked}\n          delete={(event) => {this.deleteTask(event, index)}} />);\n    });\n    return (\n      <div className=\"App\">\n        <TodoAdder change={(event)=>{this.changeTaskName(event)}} taskName={this.state.taskName} click={(event)=>{this.addTodo(this.state.taskName)}} enterPressed={(event)=>this.keyPressed(event)}/>\n        <ul>\n          {myTodos}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}